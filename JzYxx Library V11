local JzYxxUI = {
    Version = "2.0",
    ActiveWindows = {},
    DefaultTheme = {
        Primary = Color3.fromRGB(139, 69, 19), -- Marrom médio
        Secondary = Color3.fromRGB(160, 82, 45), -- Marrom claro
        Accent = Color3.fromRGB(205, 133, 63), -- Marrom dourado
        Text = Color3.fromRGB(245, 222, 179), -- Bege claro
        Error = Color3.fromRGB(220, 20, 60), -- Vermelho
        Success = Color3.fromRGB(50, 205, 50), -- Verde
        Discord = Color3.fromRGB(88, 101, 242) -- Azul Discord
    },
    Icons = {
        Close = "rbxassetid://3926305904",
        Minimize = "rbxassetid://3926305727",
        Expand = "rbxassetid://3926305868",
        Settings = "rbxassetid://3926307971",
        Info = "rbxassetid://3926305566",
        Check = "rbxassetid://3926305884"
    }
}

-- Sistema de criação de elementos único
local function CreateElement(className, properties)
    local element = Instance.new(className)
    for prop, value in pairs(properties) do
        if prop ~= "Children" then
            element[prop] = value
        end
    end
    if properties.Children then
        for _, child in ipairs(properties.Children) do
            child.Parent = element
        end
    end
    return element
end

-- Sistema de animação personalizado
local function Animate(element, properties, duration, style)
    local tweenInfo = TweenInfo.new(
        duration or 0.25,
        style or Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    )
    local tween = game:GetService("TweenService"):Create(element, tweenInfo, properties)
    tween:Play()
    return tween
end

-- Janela principal com design único
function JzYxxUI:CreateWindow(config)
    local windowId = #self.ActiveWindows + 1
    local theme = config.Theme or self.DefaultTheme
    
    local MainWindow = {
        Tabs = {},
        IsMinimized = false,
        Theme = theme
    }
    
    local ScreenGui = CreateElement("ScreenGui", {
        Name = "JzYxxUI_Window_"..windowId,
        Parent = game:GetService("CoreGui"),
        ResetOnSpawn = false
    })
    
    local MainFrame = CreateElement("Frame", {
        Name = "MainFrame",
        Size = config.Size or UDim2.new(0, 550, 0, 400),
        Position = config.Position or UDim2.new(0.5, -275, 0.5, -200),
        BackgroundColor3 = theme.Primary,
        Children = {
            CreateElement("UICorner", {CornerRadius = UDim.new(0, 12)}),
            CreateElement("UIStroke", {
                Color = theme.Accent,
                Thickness = 2
            })
        }
    }, ScreenGui)
    
    -- Header com design diferenciado
    local Header = CreateElement("Frame", {
        Name = "Header",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = theme.Secondary,
        Children = {
            CreateElement("UICorner", {
                CornerRadius = UDim.new(0, 12, 0, 0)
            }),
            CreateElement("TextLabel", {
                Name = "Title",
                Text = config.Title or "JzYxxUI Window",
                Font = Enum.Font.GothamBold,
                TextSize = 16,
                TextColor3 = theme.Text,
                Size = UDim2.new(0.5, 0, 1, 0),
                Position = UDim2.new(0, 15, 0, 0),
                BackgroundTransparency = 1,
                TextXAlignment = Enum.TextXAlignment.Left
            }),
            CreateElement("ImageButton", {
                Name = "CloseButton",
                Image = self.Icons.Close,
                ImageColor3 = theme.Error,
                Size = UDim2.new(0, 25, 0, 25),
                Position = UDim2.new(1, -30, 0.5, 0),
                AnchorPoint = Vector2.new(0, 0.5),
                BackgroundTransparency = 1
            })
        }
    }, MainFrame)
    
    -- Sistema de abas vertical único
    local TabContainer = CreateElement("Frame", {
        Name = "TabContainer",
        Size = UDim2.new(0, 150, 1, -40),
        Position = UDim2.new(0, 0, 0, 40),
        BackgroundColor3 = theme.Primary,
        Children = {
            CreateElement("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 5)
            }),
            CreateElement("UIPadding", {
                PaddingTop = UDim.new(0, 10),
                PaddingLeft = UDim.new(0, 5)
            })
        }
    }, MainFrame)
    
    -- Área de conteúdo
    local ContentContainer = CreateElement("ScrollingFrame", {
        Name = "ContentContainer",
        Size = UDim2.new(1, -150, 1, -40),
        Position = UDim2.new(0, 150, 0, 40),
        BackgroundTransparency = 1,
        ScrollBarThickness = 5,
        ScrollBarImageColor3 = theme.Accent,
        Children = {
            CreateElement("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 10)
            }),
            CreateElement("UIPadding", {
                PaddingTop = UDim.new(0, 10),
                PaddingLeft = UDim.new(0, 10)
            })
        }
    }, MainFrame)
    
    -- Funções da janela
    function MainWindow:ToggleVisibility()
        ScreenGui.Enabled = not ScreenGui.Enabled
    end
    
    function MainWindow:Minimize()
        self.IsMinimized = not self.IsMinimized
        if self.IsMinimized then
            Animate(MainFrame, {Size = UDim2.new(0, 550, 0, 40)})
        else
            Animate(MainFrame, {Size = config.Size or UDim2.new(0, 550, 0, 400)})
        end
    end
    
    function MainWindow:Close()
        ScreenGui:Destroy()
        table.remove(self.ActiveWindows, windowId)
    end
    
    -- Adicionar aba com design único
    function MainWindow:AddTab(tabConfig)
        local tabId = #self.Tabs + 1
        local tab = {
            Name = tabConfig.Name or "Tab "..tabId,
            Content = {}
        }
        
        local TabButton = CreateElement("TextButton", {
            Name = tab.Name.."_Button",
            Text = "",
            Size = UDim2.new(1, -10, 0, 35),
            BackgroundColor3 = tabId == 1 and theme.Accent or theme.Secondary,
            AutoButtonColor = false,
            Children = {
                CreateElement("UICorner", {CornerRadius = UDim.new(0, 8)}),
                CreateElement("TextLabel", {
                    Text = tab.Name,
                    Font = Enum.Font.Gotham,
                    TextSize = 13,
                    TextColor3 = theme.Text,
                    Size = UDim2.new(1, -10, 1, 0),
                    Position = UDim2.new(0, 10, 0, 0),
                    BackgroundTransparency = 1,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
            }
        }, TabContainer)
        
        local TabContent = CreateElement("ScrollingFrame", {
            Name = tab.Name.."_Content",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Visible = tabId == 1,
            ScrollBarThickness = 5,
            ScrollBarImageColor3 = theme.Accent,
            Children = {
                CreateElement("UIListLayout", {
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0, 10)
                }),
                CreateElement("UIPadding", {
                    PaddingTop = UDim.new(0, 5),
                    PaddingLeft = UDim.new(0, 5)
                })
            }
        }, ContentContainer)
        
        function tab:Show()
            for _, otherTab in pairs(self.Tabs) do
                otherTab.Content.Visible = false
                Animate(otherTab.Button, {BackgroundColor3 = theme.Secondary})
            end
            TabContent.Visible = true
            Animate(TabButton, {BackgroundColor3 = theme.Accent})
        end
        
        TabButton.MouseButton1Click:Connect(function()
            tab:Show()
        end)
        
        -- Elementos da aba
        function tab:AddSection(title)
            local section = CreateElement("Frame", {
                Name = "Section_"..title,
                Size = UDim2.new(1, -10, 0, 30),
                BackgroundTransparency = 1,
                Children = {
                    CreateElement("TextLabel", {
                        Text = title,
                        Font = Enum.Font.GothamBold,
                        TextSize = 14,
                        TextColor3 = theme.Text,
                        Size = UDim2.new(1, 0, 1, 0),
                        BackgroundTransparency = 1,
                        TextXAlignment = Enum.TextXAlignment.Left
                    }),
                    CreateElement("Frame", {
                        Size = UDim2.new(1, 0, 0, 1),
                        Position = UDim2.new(0, 0, 1, -5),
                        BackgroundColor3 = theme.Accent
                    })
                }
            }, TabContent)
            
            return {
                SetTitle = function(newTitle)
                    section.TextLabel.Text = newTitle
                end
            }
        end
        
        function tab:AddButton(buttonConfig)
            local button = CreateElement("TextButton", {
                Name = buttonConfig.Name or "Button",
                Text = "",
                Size = UDim2.new(1, -10, 0, 35),
                BackgroundColor3 = theme.Secondary,
                AutoButtonColor = false,
                Children = {
                    CreateElement("UICorner", {CornerRadius = UDim.new(0, 6)}),
                    CreateElement("TextLabel", {
                        Text = buttonConfig.Name or "Button",
                        Font = Enum.Font.Gotham,
                        TextSize = 13,
                        TextColor3 = theme.Text,
                        Size = UDim2.new(1, -10, 1, 0),
                        Position = UDim2.new(0, 10, 0, 0),
                        BackgroundTransparency = 1,
                        TextXAlignment = Enum.TextXAlignment.Left
                    })
                }
            }, TabContent)
            
            button.MouseButton1Click:Connect(buttonConfig.Callback or function() end)
            
            return {
                SetText = function(newText)
                    button.TextLabel.Text = newText
                end,
                SetCallback = function(newCallback)
                    button.MouseButton1Click:Connect(newCallback)
                end
            }
        end
        
        function tab:AddDiscordInvite(inviteLink)
            local discordFrame = CreateElement("Frame", {
                Size = UDim2.new(1, -10, 0, 60),
                BackgroundColor3 = theme.Discord,
                Children = {
                    CreateElement("UICorner", {CornerRadius = UDim.new(0, 6)}),
                    CreateElement("TextLabel", {
                        Text = "Join Discord",
                        Font = Enum.Font.GothamBold,
                        TextSize = 14,
                        TextColor3 = Color3.new(1, 1, 1),
                        Size = UDim2.new(1, -10, 0, 20),
                        Position = UDim2.new(0, 10, 0, 5),
                        BackgroundTransparency = 1,
                        TextXAlignment = Enum.TextXAlignment.Left
                    }),
                    CreateElement("TextButton", {
                        Text = "Copy Invite",
                        Font = Enum.Font.Gotham,
                        TextSize = 12,
                        TextColor3 = Color3.new(1, 1, 1),
                        Size = UDim2.new(1, -20, 0, 25),
                        Position = UDim2.new(0.5, 0, 1, -30),
                        AnchorPoint = Vector2.new(0.5, 0),
                        BackgroundColor3 = Color3.fromRGB(70, 70, 150),
                        Children = {
                            CreateElement("UICorner", {CornerRadius = UDim.new(0, 4)})
                        }
                    })
                }
            }, TabContent)
            
            discordFrame.TextButton.MouseButton1Click:Connect(function()
                setclipboard(inviteLink)
                discordFrame.TextButton.Text = "Copied!"
                task.wait(2)
                discordFrame.TextButton.Text = "Copy Invite"
            end)
        end
        
        table.insert(self.Tabs, tab)
        return tab
    end
    
    Header.CloseButton.MouseButton1Click:Connect(function()
        MainWindow:Close()
    end)
    
    table.insert(self.ActiveWindows, MainWindow)
    return MainWindow
end

return JzYxxUI
